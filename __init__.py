# <blender_addon>
#
# WARNING: This is a single-file addon. Do not edit this file
# unless you know what you are doing.
#
# To install, place the containing folder in your Blender addons directory
# or zip the folder and install from the ZIP file.
#
#</blender_addon>

bl_info = {
    "name": "Origin to Bounding Box Corner",
    "author": "berkan + gemini",
    "version": (2, 0, 0),
    "blender": (3, 0, 0),
    "location": "3D Viewport > Sidebar (N-Panel) > Tool Tab",
    "description": "Optimized addon to set an object's origin to a bounding box corner.",
    "warning": "",
    "doc_url": "https://github.com/google/generative-ai-docs", # Placeholder
    "tracker_url": "https://github.com/google/generative-ai-docs/issues", # Placeholder
    "support": "COMMUNITY",
    "category": "Object",
}

import bpy
from mathutils import Vector

# --- PROPERTIES ---

class BBOX_Origin_Properties(bpy.types.PropertyGroup):
    """Stores the state of the axis toggles for the addon."""
    axis_states: bpy.props.EnumProperty(
        name="Axis States",
        items=[
            ('POSITIVE_X', "+X", ""), ('NEGATIVE_X', "-X", ""),
            ('POSITIVE_Y', "+Y", ""), ('NEGATIVE_Y', "-Y", ""),
            ('POSITIVE_Z', "+Z", ""), ('NEGATIVE_Z', "-Z", "")
        ],
        options={'HIDDEN'},
        # Using a single property with flags is not ideal for this,
        # so we'll stick to three distinct properties for clarity and ease of use.
    )

    x_axis_side: bpy.props.EnumProperty(
        name="X Axis", description="Which side of the X-axis to use",
        items=[('POSITIVE', "+X", ""), ('NEGATIVE', "-X", "")], default='POSITIVE'
    )
    y_axis_side: bpy.props.EnumProperty(
        name="Y Axis", description="Which side of the Y-axis to use",
        items=[('POSITIVE', "+Y", ""), ('NEGATIVE', "-Y", "")], default='POSITIVE'
    )
    z_axis_side: bpy.props.EnumProperty(
        name="Z Axis", description="Which side of the Z-axis to use",
        items=[('POSITIVE', "+Z", ""), ('NEGATIVE', "-Z", "")], default='POSITIVE'
    )

# --- OPERATORS ---

class BBOX_OT_toggle_axis(bpy.types.Operator):
    """Toggles the state of a single axis button."""
    bl_idname = "object.bbox_origin_toggle_axis"
    bl_label = "Toggle Bounding Box Axis"
    bl_description = "Toggle between the positive and negative side for this axis"
    bl_options = {'REGISTER', 'UNDO'}

    axis: bpy.props.StringProperty()

    def execute(self, context):
        props = context.scene.origin_to_bbox_corner_props
        prop_name = f"{self.axis.lower()}_axis_side"
        current_state = getattr(props, prop_name)
        new_state = 'NEGATIVE' if current_state == 'POSITIVE' else 'POSITIVE'
        setattr(props, prop_name, new_state)
        return {'FINISHED'}


class BBOX_OT_set_origin_to_corner(bpy.types.Operator):
    """Sets the origin of selected objects to a specified bounding box corner."""
    bl_idname = "object.set_origin_to_bbox_corner"
    bl_label = "Set to Bounding Box"
    bl_description = "Set origin to the specified corner and move object to world origin"
    bl_options = {'REGISTER', 'UNDO'}

    @classmethod
    def poll(cls, context):
        return context.mode == 'OBJECT' and context.selected_objects

    def execute(self, context):
        props = context.scene.origin_to_bbox_corner_props
        
        # Preserve the user's context (selection and cursor location)
        # to ensure the operator is non-destructive to the workflow.
        saved_cursor_location = context.scene.cursor.location.copy()
        original_active = context.view_layer.objects.active
        selected_objs = context.selected_objects[:]

        for obj in selected_objs:
            context.view_layer.objects.active = obj
            
            # Get bounding box corners in world space to handle object transforms.
            world_bbox = [obj.matrix_world @ Vector(corner) for corner in obj.bound_box]

            # Determine the target corner from UI properties.
            target_corner = Vector((
                max(c.x for c in world_bbox) if props.x_axis_side == 'NEGATIVE' else min(c.x for c in world_bbox),
                max(c.y for c in world_bbox) if props.y_axis_side == 'NEGATIVE' else min(c.y for c in world_bbox),
                max(c.z for c in world_bbox) if props.z_axis_side == 'NEGATIVE' else min(c.z for c in world_bbox),
            ))

            # Using bpy.ops.object.origin_set is the most robust method.
            # It correctly handles all object types, modifiers, and dependencies,
            # which is complex to replicate manually in Python.
            context.scene.cursor.location = target_corner
            bpy.ops.object.origin_set(type='ORIGIN_CURSOR', center='MEDIAN')
            bpy.ops.object.location_clear(clear_delta=False)

        # Restore the original context.
        for obj in selected_objs:
            obj.select_set(True)
        context.view_layer.objects.active = original_active
        context.scene.cursor.location = saved_cursor_location

        self.report({'INFO'}, f"Origin set for {len(selected_objs)} object(s).")
        return {'FINISHED'}


# --- UI PANEL ---

class BBOX_PT_origin_panel(bpy.types.Panel):
    """Creates the UI Panel in the 3D Viewport Sidebar."""
    bl_label = "Origin to Bounding Box Corner"
    bl_idname = "OBJECT_PT_origin_to_bbox_corner"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = 'Tool'

    def draw(self, context):
        layout = self.layout
        props = context.scene.origin_to_bbox_corner_props
        
        row = layout.row(align=True)

        # A loop makes the UI code more concise and easier to maintain.
        for axis in ('X', 'Y', 'Z'):
            prop_name = f"{axis.lower()}_axis_side"
            text = f"+{axis}" if getattr(props, prop_name) == 'POSITIVE' else f"-{axis}"
            op = row.operator(BBOX_OT_toggle_axis.bl_idname, text=text)
            op.axis = axis

        layout.operator(BBOX_OT_set_origin_to_corner.bl_idname)


# --- REGISTRATION ---

classes = [
    BBOX_Origin_Properties,
    BBOX_OT_toggle_axis,
    BBOX_OT_set_origin_to_corner,
    BBOX_PT_origin_panel,
]

def register():
    for cls in classes:
        bpy.utils.register_class(cls)
    bpy.types.Scene.origin_to_bbox_corner_props = bpy.props.PointerProperty(type=BBOX_Origin_Properties)

def unregister():
    del bpy.types.Scene.origin_to_bbox_corner_props
    for cls in reversed(classes):
        bpy.utils.unregister_class(cls)

if __name__ == "__main__":
    register()
